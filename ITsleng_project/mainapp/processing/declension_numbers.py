def decl_scores(score: int) -> str:
    """
    Функция производит склонение слова "балл" в зависимости от числа
    """
    d = score % 10
    h = score % 100
    if d == 1 and h != 11:
        s = ""
    elif 1 < d < 5 and not 11 < h < 15:
        s = "а"
    else:
        s = "ов"
    return f'{score} балл{s}'


def decl_places(N: int) -> str:
    """
    Функция производит склонение номера места (0 до 9999)для озвучки
    """
    noround_decl = {
        1: "первом",
        2: "втором",
        3: "третьем",
        4: "четвертом",
        5: "пятом",
        6: "шестом",
        7: "седьмом",
        8: "восьмом",
        9: "девятом",
        10: "десятом",
        11: "одинадцатом",
        12: "двенадцатом",
        13: "тринадцатом",
        14: "четырнадцатом",
        15: "пятнадцатом",
        16: "шестнадцатом",
        17: "семнадцатом",
        18: "восемнадцатом",
        19: "девятнадцатом"
    }
    round2_decl = {
        10: 'десятом',
        20: 'двадцатом',
        30: 'тридцатом',
        40: 'сороковом',
        50: 'пятидесятом',
        60: 'шестидесятом',
        70: 'семидесятом',
        80: 'восьмидесятом',
        90: 'девяностом',
        100: 'сотом',
        200: 'двухсотом',
        300: 'трёхсотом',
        400: 'четырехсотом',
        500: 'пятисотом',
        600: 'шестисотом',
        700: 'семисотом',
        800: 'восьмисотом',
        900: 'девятисотом',
        1000: 'тысячном',
        2000: 'двухтысячном',
        3000: 'трёхтысячном',
        4000: 'четырёхтысячном',
        5000: 'пятитысячном',
        6000: 'шеститысячном',
        7000: 'семитысячном',
        8000: 'восьмитысячном',
        9000: 'девятитысячном',
    }
    val = len(str(N))
    if 1 <= N <= 19:
        return f"{noround_decl.get(N)}"
    elif N == (N // 10 ** (val - 1)) * (10 ** (val - 1)):  # Круглые числа типа X000, X00, X0
        return f"{round2_decl.get(N)}"
    elif N % 100 == 0:
        round_part = (N // 1000) * 1000
        rest_part = N % 1000
        return f"{round_part} {round2_decl.get(rest_part)}"
    elif N % 10 == 0:
        round_part = (N // 100) * 100
        rest_part = N % 100
        return f"{round_part} {round2_decl.get(rest_part)}"
    else:
        round_part = (N // 10) * 10
        rest_part = N % 10
        if 1 <= N % 100 <= 19:
            round_part = (N // 100) * 100
            rest_part = N % 100
        return f"{round_part} {noround_decl.get(rest_part)}"


if __name__ == '__main__':
    print(decl_places(120))
