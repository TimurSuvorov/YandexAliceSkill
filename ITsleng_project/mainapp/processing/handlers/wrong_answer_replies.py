import random
import re

from mainapp.processing.db.extract_json import get_db_sentences, get_db_sounds
from .proc_response_obj import generate_var_buttons, generate_var_string, tts_prompt_sound, remove_tts_symbols
from ..db.images import Image
from ..handle_sessionfile import get_qa_session_sentence
from ..handle_userprofile import update_scores


def incorrectanswer(command, session_state, user_id, session_id):

    sentences = get_db_sentences()

    # –í—ã–±–∏—Ä–∞–µ–º –∑–≤—É–∫–∏
    sounds = get_db_sounds()
    wrongsound = random.choice(sounds["WRONG"])

    # –ï—Å–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–æ –ø–æ–ø—ã—Ç–∫–∞ —É–≥–∞–¥–∞—Ç—å –æ—Ç–≤–µ—Ç –µ—â–µ –µ—Å—Ç—å
    if session_state["attempt"] > 0:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
        mistakesentence = random.choice(sentences["MISTAKEsentence"])
        postsentence = random.choice(sentences["POSTsentence"])
        # –°–Ω–∏–∂–∞–µ–º –∫–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        attempt = session_state["attempt"] - 1
        # –°–∞–º –≤–æ–ø—Ä–æ—Å –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ session_state
        question_dict = session_state["question_dict"]
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        question_variants = question_dict["variants"][:3]

        # –£–¥–∞–ª—è–µ–º –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –µ—Å–ª–∏ –±—ã–ª –Ω–∞–∑–≤–∞–Ω –æ—Ç—Ç—É–¥–∞. –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –¥—Ä—É–≥—É —Ñ—Ä–∞–∑—É
        for variant in question_variants:
            if re.search(variant.replace("+", ""), command):
                question_variants.remove(variant)
                postsentence = random.choice(
                    [
                        "–û—Å—Ç–∞–ª–∏—Å—å –≤–∞—Ä–∏–∞–Ω—Ç—ã",
                        "–í–æ—Ç —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å",
                        "–û—Å—Ç–∞–ª–æ—Å—å –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞",
                        "–ù–æ —É–∂–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–º–µ–Ω—å—à–µ",
                     ]
                )

        variants = generate_var_string(question_variants)

        response: dict = {
                'text': remove_tts_symbols(f'{mistakesentence}\n{postsentence}:\n{variants}'),
                'tts': f'{wrongsound}{mistakesentence}.sil <[50]>{postsentence}:sil <[50]> {variants}',
                'card': {
                    'type': 'BigImage',
                    'image_id': Image.WRONG_ANSWER_1.id,
                    'title': remove_tts_symbols(random.choice(sentences["WRONGsentence"])),
                    'description': remove_tts_symbols(f'{postsentence}:\n{variants}')
                },
                'buttons': generate_var_buttons(question_variants),
                'end_session': 'False'
        }

        analytics = {
            "events": [
                {
                    "name": "–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç 1",
                    "value": {
                        "–í–æ–ø—Ä–æ—Å": session_state["question_dict"]["sentence"],
                        "–û—Ç–≤–µ—Ç": command
                    }
                }
            ]
        }

    else:
        # –ï—Å–ª–∏ –ø–æ–ø—ã—Ç–æ–∫ —É–≥–∞–¥–∞—Ç—å –±–æ–ª—å—à–µ –Ω–µ—Ç. –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Ä—É–≥–∞—Ç—å
        badsentence = random.choice(sentences["BADsentence"])
        postsentence = random.choice(sentences["POSTsentence"])
        letsnext = random.choice(sentences["LETSNEXTsentence"])
        questionsound = random.choice(sounds["QUESTION"])
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        answer = session_state["question_dict"]["answers"][0]
        question_explanation = session_state["question_dict"]["explanation"]
        # –ë–µ—Ä–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Å–µ—Å—Å–∏–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∫ –Ω–µ–º—É
        question_dict = get_qa_session_sentence(session_id)
        attempt = 1
        # –ò–∑ –≤–æ–ø—Ä–æ—Å–∞-—Å–ª–æ–≤–∞—Ä—è –±–µ—Ä–µ–º —Å–∞–º –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –æ—Ç–≤–µ—Ç
        question_body = question_dict["sentence"]
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        question_variants = question_dict["variants"][:3]
        variants = generate_var_string(question_variants)

        # –ü–æ–¥—Å—á—ë—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ –µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        score = 0
        cur_scores = update_scores(user_id, session_id, score)
        allscores = cur_scores["allscores"]
        sessionscore = cur_scores["sessionscore"]
        cur_rating = f'\n\nüèÖ–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥:\n–û–±—â–∏–π: {allscores}\n–í —ç—Ç–æ–π –∏–≥—Ä–µ: {sessionscore}'

        response: dict = {
                'text': remove_tts_symbols(f'{badsentence}: {answer}.\n{question_explanation} \n{letsnext}.\n‚ú®{question_body} \n{postsentence}:\n{variants}{cur_rating}'),
                'tts': f'{wrongsound}{badsentence}: sil <[50]> {answer}.sil <[70]>{question_explanation} sil <[100]> {letsnext}: sil <[100]> {questionsound}{tts_prompt_sound(question_body)}. {postsentence}: sil <[50]>{variants}',
                'card': {
                    'type': 'BigImage',
                    'image_id': Image.WRONG_ANSWER_2.id,
                    'title': remove_tts_symbols(random.choice(sentences["WRONGsentence"])),
                    'description': remove_tts_symbols(f'–û—Ç–≤–µ—Ç: {answer}.\n{question_explanation}\n\n {letsnext}.\n‚ú®{question_body} \n{postsentence}:\n{variants}{cur_rating}')
                },
                'buttons': generate_var_buttons(question_variants),
                'end_session': 'False'
        }
        analytics = {
            "events": [
                {
                    "name": "–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç 2",
                    "value": {
                        "–í–æ–ø—Ä–æ—Å": session_state["question_dict"]["sentence"],
                        "–û—Ç–≤–µ—Ç": command
                    }
                },
                {
                    "name": "–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å",
                    "value": {
                        "–í–æ–ø—Ä–æ—Å": remove_tts_symbols(question_body),
                    }
                }
            ]
        }

    return {
        "response": response,
        "analytics": analytics,
        "session_state": {
            "question_dict": question_dict,
            "attempt": attempt
        }
    }
