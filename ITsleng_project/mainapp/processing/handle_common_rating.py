import os
from operator import itemgetter
from time import time
from typing import TypeVar, List, Dict, Tuple

import rapidjson

PathLike = TypeVar("PathLike", str, os.PathLike)

cur_dir: PathLike = os.path.dirname(__file__)
USERFOLDER: PathLike = os.path.join(cur_dir, 'userfiles')
COMMON_RATING_FILE: PathLike = os.path.join(cur_dir, 'ratingfiles', 'common_rating.json')

TIME_REFRESH_AGO = 60  # –°—Ä–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è userprofile-–æ–≤ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ, —á–µ–º –ø–µ—Ä–∏–æ–¥ —Å–±–æ—Ä–∞) [—Å–µ–∫]
TIME_CHECK_AGO = TIME_REFRESH_AGO + 60  # –°—Ä–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—â–µ–≥–æ —Ñ–∞–π–ª–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ [—Å–µ–∫]


def collect_common_rating() -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞—Ö –∏–∑ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ñ–∞–π–ª–∞.

    –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ —Ç–∞–π–º–µ—Ä–∞ TIME_REFRESH_AGO, –∫–æ—Ç–æ—Ä—ã–π –æ–∑–Ω–∞—á–∞–µ—Ç –æ—Ç—Ä–µ–∑–æ–∫
    –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã—Ö –ø—Ä–æ—Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
    –°–±–æ—Ä –±–∞–ª–ª–æ–≤ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ —Ñ–∞–π–ª ./ratingfiles/common_rating.json –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è c "user_id": "scores".
    –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ `common_rating.json` –æ–±–Ω–æ–≤–ª—è–ª—Å—è –æ—Ç–Ω-–Ω–æ –¥–∞–≤–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑-–∑–∞ —Å–±–æ—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞) -
    –±–æ–ª—å—à–µ, —á–µ–º —Ç–∞–π–º–µ—Ä TIME_CHECK_AGO - –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è –≤—Å–µ –∏–º–µ—é—â–∏–µ—Å—è –ø—Ä–æ—Ñ–∞–π–ª—ã.
    """

    try:
        with open(COMMON_RATING_FILE, "r", encoding="utf-8") as common_rating_fp:
            common_rating_result: Dict = rapidjson.load(common_rating_fp)
    except FileNotFoundError:
        with open(COMMON_RATING_FILE, "w", encoding="utf-8") as fp:
            pass
        common_rating_result = {}

    userfiles: List[str] = os.listdir(USERFOLDER)
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±—Ö–æ–¥–∏–º –≤—Å–µ userprofile-—ã
    userfiles_for_collect: List[str] = [os.path.join(USERFOLDER, file) for file in userfiles]
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –æ–±—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª—è–ª—Å—è –Ω–µ–¥–∞–≤–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∞–π–ª–æ–≤ –∏ –æ–±—â–∏–π —Ñ–∞–π–ª —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–µ–ø—É—Å—Ç–æ–π
    if time() - os.path.getmtime(COMMON_RATING_FILE) < TIME_CHECK_AGO and common_rating_result:
        # –û–±—Ö–æ–¥–∏–º —Ç–æ–ª—å–∫–æ userprofile-—ã —Å–æ —Å–≤–µ–∂–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        userfiles_for_collect: List = \
            list(filter(lambda file: time() - os.path.getmtime(file) < TIME_REFRESH_AGO, userfiles_for_collect))
    for file in userfiles_for_collect:
        try:
            with open(file, "r", encoding="utf-8") as userfile_fp:
                userfile_data: Dict = rapidjson.load(userfile_fp)
                user_id, userscore = itemgetter("user_id", "allscores")(userfile_data)
                common_rating_result[user_id] = userscore
        except (KeyError, FileNotFoundError):
            pass
    common_rating_result_sorted: Dict[str, int] = dict(sorted(common_rating_result.items(),
                                                              key=lambda item: item[1],
                                                              reverse=True)
                                                       )
    with open(COMMON_RATING_FILE, "w", encoding="utf-8") as common_rating_fp:
        common_rating_fp.write(rapidjson.dumps(common_rating_result_sorted, indent=4))


def get_user_common_rating_info(user_id: str) -> Tuple[List[int], str]:
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ –≤ –æ–±—â–µ–º —Ä–µ–π—Ç–∏–Ω–≥–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –¢–∞–∫–∂–µ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Ä–µ–π—Ç–∏–Ω–≥–∞.
    """
    with open(COMMON_RATING_FILE, "r", encoding="utf-8") as com_rat_fp:
        com_rat_data: dict = rapidjson.load(com_rat_fp)
    # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –≤ –æ–±—â–µ–º —Ä–µ–π—Ç–∏–Ω–≥–µ –∏–∑ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –ø–æ –ø–æ–∑–∏—Ü–∏–∏
    usersid_list: List[str] = list(com_rat_data.keys())
    usersid_scores_list: List[Tuple[str, int]] = list(com_rat_data.items())
    user_place_score: List[int] = [usersid_list.index(user_id) + 1, com_rat_data.get(user_id)]

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–π—Ç–∏–Ω–≥–∞
    rating_table_print: str = "–¢–∞–±–ª–∏—Ü–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞:"
    for index, userid_scores in enumerate(usersid_scores_list[:3]):
        rating_table_print += f'\n{index + 1}-–µ –º–µ—Å—Ç–æ: {userid_scores[1]}'
        if userid_scores[0] == user_id:
            rating_table_print += " üëàüëà"

    if user_place_score[0] == 4:
        rating_table_print += f'\n{user_place_score[0]}-–µ –º–µ—Å—Ç–æ: {user_place_score[1]} üëàüëà'
    if user_place_score[0] == 5:
        rating_table_print += f'\n4-–µ –º–µ—Å—Ç–æ: {usersid_scores_list[3][1]}'
        rating_table_print += f'\n{user_place_score[0]}-–µ –º–µ—Å—Ç–æ: {user_place_score[1]} üëàüëà'
    if user_place_score[0] > 5:
        rating_table_print += f'\n...\n{user_place_score[0]}-–µ –º–µ—Å—Ç–æ: {user_place_score[1]} üëàüëà'
    rating_table_print += "\n...\n"
    return user_place_score, rating_table_print


